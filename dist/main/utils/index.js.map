{"version":3,"sources":["../../../src/main/utils/index.ts"],"sourcesContent":["import { MD5 } from 'crypto-js'\nimport dayjs from 'dayjs'\nimport { Library } from 'ffi-napi'\nimport { UcharType } from '@/services/finger-service/types'\nimport { CRC_SDK_PATH } from '@/config'\nimport pkg from '../../package.json'\n\n/**\n * @description: 生成 ipc 通信的返回数据结构\n * @param {*} T\n * @return {*}\n */\nexport const genResponseData = <T>(success: boolean, msg?: string, data?: T) => {\n  return {\n    success,\n    msg,\n    data\n  }\n}\n\n/**\n * @description: 生成 md5 加密后的密码\n * @param {string} username\n * @param {string} password\n * @param {string} salt\n * @return {*}\n */\nexport const genMd5EncryptedPassword = (username: string, password: string, salt: string) => {\n  return MD5(username + password + salt).toString()\n}\n\nexport const parseRFIDReportData = (data: string): string[] => {\n  const PREFIX = '5a00011200'\n  const arr = data.split(PREFIX)\n\n  const parseArr = arr.reduce((acc, cur) => {\n    if (cur.startsWith('00')) {\n      const length = parseInt('0x' + cur.substring(0, 4), 16) * 2\n      acc.push(`${PREFIX}${cur.substring(0, 4 + length)}`)\n    }\n\n    return acc\n  }, [])\n\n  return parseArr\n}\n\n/**\n * @description: 从 RFID 读取器上报命令中获取 EPC 和 TID\n * @param {string} command\n * @return {*}\n */\nexport const getTIDByReportData = (data: string) => {\n  let str = data\n  const PREFIX = '5a00011200'\n  const TIDLengthCommandLength = 4\n  const MidCommandLength = 16\n\n  str = str.replace(PREFIX, '')\n\n  const EPCLength = parseInt('0x' + str.substring(4, 8), 16) * 2\n  const TIDLength =\n    parseInt(\n      '0x' + str.substring(8 + EPCLength + MidCommandLength, 8 + EPCLength + MidCommandLength + TIDLengthCommandLength),\n      16\n    ) * 2\n\n  const TID = str.substring(\n    8 + EPCLength + MidCommandLength + TIDLengthCommandLength,\n    8 + EPCLength + MidCommandLength + TIDLengthCommandLength + TIDLength\n  )\n\n  return TID\n}\n\nexport const generateCurrentTime = () => {\n  return dayjs().format('YYYY-MM-DD HH:mm:ss')\n}\n\n/**\n * @description: 十进制转二进制并补全 8 位，再颠倒顺序\n * @param {number} number\n * @return {*}\n */\nexport const convertDecimalToBinary = (number: number) => {\n  const binary = number.toString(2)\n  const binaryLength = binary.length\n  const MAX_LENGTH = 8\n  const binaryString = new Array(MAX_LENGTH - binaryLength).fill('0').join('') + binary\n  const result = binaryString.split('').reverse().join('')\n\n  return result\n}\n\n/**\n * @description: 根据数组数组生成对应索引为 1 的二进制字符串\n * @param {number} numbers\n * @return {*}\n */\nexport const generateBinaryString = (numbers: number[]) => {\n  const binaryArray = Array.from({ length: 32 }, () => '0')\n\n  for (const num of numbers) {\n    binaryArray[num - 1] = '1'\n  }\n\n  return binaryArray.reverse().join('')\n}\n\n/**\n * @description: 二进制字符串转十六进制字符串，长度为8，补0\n * @param {string} binary\n * @return {*}\n */\nexport const binaryToHex = (binary: string): string => {\n  const hex = parseInt(binary, 2).toString(16).toUpperCase()\n  return hex.padStart(8, '0')\n}\n\n/**\n * @description: 生成锁控板命令\n * @param {string} source 锁控板命令\n * @return {*}\n */\nexport const generateLockCommand = (source: string) => {\n  const arr = []\n  for (let index = 0; index < source.length; index++) {\n    if (index % 2 === 0) {\n      arr.push('0x' + source.slice(index, index + 2))\n    }\n  }\n\n  const result = arr.reduce((acc, cur, index) => {\n    if (index === 0) acc = cur\n    else {\n      acc = '0x' + (acc ^ cur).toString(16)\n    }\n\n    return acc\n  }, '')\n\n  const command = [...arr, result]\n    .map(item => item.slice(2, 4))\n    .join('')\n    .toLocaleUpperCase()\n\n  return Buffer.from(command, 'hex')\n}\n\n/**\n * @description: 生成 CRC16 校验码\n * @param {string} str\n * @return {*}\n */\nexport const generateCRC16Code = (str: string) => {\n  const crcSDK = Library(CRC_SDK_PATH, {\n    CRC16_CCITT: ['int', [UcharType, 'int']]\n  })\n\n  const buffer = Buffer.from(str, 'hex')\n  return crcSDK.CRC16_CCITT(buffer, buffer.length).toString(16)\n}\n\n/**\n * @description: 获取应用版本信息\n * @return {*}\n */\nexport const getAppVersion = ():string => {\n  return pkg.version\n}\n"],"names":["genResponseData","genMd5EncryptedPassword","parseRFIDReportData","getTIDByReportData","generateCurrentTime","convertDecimalToBinary","generateBinaryString","binaryToHex","generateLockCommand","generateCRC16Code","getAppVersion","success","msg","data","username","password","salt","MD5","toString","PREFIX","arr","split","parseArr","reduce","acc","cur","startsWith","length","parseInt","substring","push","str","TIDLengthCommandLength","MidCommandLength","replace","EPCLength","TIDLength","TID","dayjs","format","number","binary","binaryLength","MAX_LENGTH","binaryString","Array","fill","join","result","reverse","numbers","binaryArray","from","num","hex","toUpperCase","padStart","source","index","slice","command","map","item","toLocaleUpperCase","Buffer","crcSDK","Library","CRC_SDK_PATH","CRC16_CCITT","UcharType","buffer","pkg","version"],"mappings":"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"}