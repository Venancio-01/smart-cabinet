{"version":3,"sources":["../../../src/main/utils/tcp-socket.ts"],"sourcesContent":["// 导入 net 模块\nimport { Socket } from 'net'\nimport type { Buffer } from 'buffer'\n\n// 定义 tcpSocket 类\nexport default class TcpSocket {\n  // 声明一个私有的 Socket 属性\n  private socket: Socket\n\n  // 定义构造函数，传入 address 和 port 参数\n  constructor(address: string, port: number) {\n    // 创建一个新的 Socket 实例\n    this.socket = new Socket()\n\n    // 连接到指定的地址和端口\n    this.socket.connect(port, address, () => {\n      // 连接成功后的回调函数\n      console.log(`Connected to ${address}:${port}`)\n    })\n\n    // 监听 socket 的 data 事件，接收数据\n    this.socket.on('data', (data) => {\n      // 处理接收到的数据\n      console.log(`Received: ${data}`)\n    })\n\n    // 监听 socket 的 close 事件，断开连接\n    this.socket.on('close', () => {\n      // 处理断开连接的情况\n      console.log('Connection closed')\n    })\n  }\n\n  // 定义一个发送数据的方法\n  send(data: Buffer | string) {\n    // 调用 socket 的 write 方法，发送数据\n    this.socket.write(data)\n  }\n\n  // 定义一个关闭连接的方法\n  close() {\n    // 调用 socket 的 destroy 方法，关闭连接\n    this.socket.destroy()\n  }\n}\n"],"names":["TcpSocket","address","port","socket","Socket","connect","console","log","on","data","send","write","close","destroy"],"mappings":"AAAA,YAAY;;;;;;;;eAKSA;;;mBAJE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIR,IAAA,AAAMA,0BAAN;;aAAMA,UAKPC,OAAe,EAAEC,IAAY;gCALtBF;QACnB,oBAAoB;QACpB,uBAAQG,UAAR,KAAA;QAIE,mBAAmB;QACnB,IAAI,CAACA,SAAS,IAAIC;QAElB,cAAc;QACd,IAAI,CAACD,OAAOE,QAAQH,MAAMD,SAAS;YACjC,aAAa;YACbK,QAAQC,IAAI,AAAC,gBAA0BL,OAAXD,SAAQ,KAAQ,OAALC;QACzC;QAEA,2BAA2B;QAC3B,IAAI,CAACC,OAAOK,GAAG,QAAQ,SAACC;YACtB,WAAW;YACXH,QAAQC,IAAI,AAAC,aAAiB,OAALE;QAC3B;QAEA,4BAA4B;QAC5B,IAAI,CAACN,OAAOK,GAAG,SAAS;YACtB,YAAY;YACZF,QAAQC,IAAI;QACd;;kBAzBiBP;;YA4BnB,cAAc;YACdU,KAAAA;mBAAAA,SAAAA,KAAKD,IAAqB;gBACxB,4BAA4B;gBAC5B,IAAI,CAACN,OAAOQ,MAAMF;YACpB;;;YAEA,cAAc;YACdG,KAAAA;mBAAAA,SAAAA;gBACE,8BAA8B;gBAC9B,IAAI,CAACT,OAAOU;YACd;;;WAtCmBb"}