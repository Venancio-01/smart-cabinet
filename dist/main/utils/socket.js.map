{"version":3,"sources":["../../../src/main/utils/socket.ts"],"sourcesContent":["import { Socket } from 'net'\n\nexport default class {\n  private instance: Socket | null = null\n  private data = ''\n  private address = ''\n  private port: number | null = null\n  private format: 'hex' | 'utf-8' = 'hex'\n\n  constructor(option: { address: string; port?: number; format?: 'hex' | 'utf-8' }) {\n    this.address = option.address\n    this.port = option?.port\n    this.format = option?.format || 'hex'\n  }\n\n  init() {\n    return new Promise<void>((resolve, reject) => {\n      // 如果已经有实例，直接抛出错误\n      if (this.instance) throw new Error('Instance already exists')\n\n      // 创建新的实例\n      this.instance = new Socket()\n\n      // 监听各种事件\n      this.instance.on('connect', () => {\n        console.log('socket 连接成功')\n        resolve()\n        clearTimeout(timer)\n      })\n\n      this.instance.on('close', () => {\n        console.log('关闭 socket 连接')\n        reject(new Error('socket 连接关闭'))\n      })\n\n      this.instance.on('error', err => {\n        console.log('socket 出错', err)\n        this.instance.destroy()\n      })\n\n      this.instance.on('data', data => {\n        this.data += data.toString(this.format)\n      })\n\n      const MAX_CONNECT_DURATION = 3000\n      const timer = setTimeout(() => {\n        this.instance.destroy()\n      }, MAX_CONNECT_DURATION)\n\n      this.connect()\n    })\n  }\n\n  connect() {\n    if (!this.instance) return\n    if (this.port) {\n      this.instance.connect(this.port, this.address)\n    } else this.instance.connect(this.address)\n  }\n\n  destroy() {\n    if (!this.instance) return\n\n    this.instance.destroy()\n  }\n\n  write(data) {\n    if (!this.instance) return\n\n    console.log('写入数据', data)\n    this.instance.write(data)\n  }\n\n  getData() {\n    if (!this.instance) return\n\n    return this.data\n  }\n\n  setData(source: string) {\n    if (!this.instance) return\n\n    this.data = source\n    return this.data\n  }\n}\n"],"names":["init","Promise","resolve","reject","instance","Error","Socket","on","console","log","clearTimeout","timer","err","destroy","data","toString","format","MAX_CONNECT_DURATION","setTimeout","connect","port","address","write","getData","setData","source","constructor","option"],"mappings":";;;;;;;;;;qBAAuB;;;;;;;;;;;;;;AAER;IAabA,OAAO;QACL,OAAO,IAAIC,QAAc,CAACC,SAASC;YACjC,iBAAiB;YACjB,IAAI,IAAI,CAACC,UAAU,MAAM,IAAIC,MAAM;YAEnC,SAAS;YACT,IAAI,CAACD,WAAW,IAAIE;YAEpB,SAAS;YACT,IAAI,CAACF,SAASG,GAAG,WAAW;gBAC1BC,QAAQC,IAAI;gBACZP;gBACAQ,aAAaC;YACf;YAEA,IAAI,CAACP,SAASG,GAAG,SAAS;gBACxBC,QAAQC,IAAI;gBACZN,OAAO,IAAIE,MAAM;YACnB;YAEA,IAAI,CAACD,SAASG,GAAG,SAASK,CAAAA;gBACxBJ,QAAQC,IAAI,aAAaG;gBACzB,IAAI,CAACR,SAASS;YAChB;YAEA,IAAI,CAACT,SAASG,GAAG,QAAQO,CAAAA;gBACvB,IAAI,CAACA,QAAQA,KAAKC,SAAS,IAAI,CAACC;YAClC;YAEA,MAAMC,uBAAuB;YAC7B,MAAMN,QAAQO,WAAW;gBACvB,IAAI,CAACd,SAASS;YAChB,GAAGI;YAEH,IAAI,CAACE;QACP;IACF;IAEAA,UAAU;QACR,IAAI,CAAC,IAAI,CAACf,UAAU;QACpB,IAAI,IAAI,CAACgB,MAAM;YACb,IAAI,CAAChB,SAASe,QAAQ,IAAI,CAACC,MAAM,IAAI,CAACC;QACxC,OAAO,IAAI,CAACjB,SAASe,QAAQ,IAAI,CAACE;IACpC;IAEAR,UAAU;QACR,IAAI,CAAC,IAAI,CAACT,UAAU;QAEpB,IAAI,CAACA,SAASS;IAChB;IAEAS,MAAMR,IAAI,EAAE;QACV,IAAI,CAAC,IAAI,CAACV,UAAU;QAEpBI,QAAQC,IAAI,QAAQK;QACpB,IAAI,CAACV,SAASkB,MAAMR;IACtB;IAEAS,UAAU;QACR,IAAI,CAAC,IAAI,CAACnB,UAAU;QAEpB,OAAO,IAAI,CAACU;IACd;IAEAU,QAAQC,MAAc,EAAE;QACtB,IAAI,CAAC,IAAI,CAACrB,UAAU;QAEpB,IAAI,CAACU,OAAOW;QACZ,OAAO,IAAI,CAACX;IACd;IA3EAY,YAAYC,MAAoE,CAAE;QANlF,uBAAQvB,YAA0B;QAClC,uBAAQU,QAAO;QACf,uBAAQO,WAAU;QAClB,uBAAQD,QAAsB;QAC9B,uBAAQJ,UAA0B;QAGhC,IAAI,CAACK,UAAUM,OAAON;QACtB,IAAI,CAACD,OAAOO,mBAAAA,oBAAAA,KAAAA,IAAAA,OAAQP;QACpB,IAAI,CAACJ,SAASW,CAAAA,mBAAAA,oBAAAA,KAAAA,IAAAA,OAAQX,MAAK,KAAK;IAClC;AAwEF"}