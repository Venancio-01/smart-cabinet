{"version":3,"sources":["../../../src/main/utils/socket.ts"],"sourcesContent":["import { Socket } from 'net'\n\nexport default class {\n  private instance: Socket | null = null\n  private data = ''\n  private address = ''\n  private port: number | null = null\n  private format: 'hex' | 'utf-8' = 'hex'\n  private timer = null\n\n  constructor(option: { address: string; port?: number; format?: 'hex' | 'utf-8' }) {\n    this.address = option.address\n    this.port = option?.port\n    this.format = option?.format || 'hex'\n  }\n\n  init() {\n    return new Promise<void>((resolve, reject) => {\n      // 如果已经有实例，直接抛出错误\n      if (this.instance)\n        throw new Error('Instance already exists')\n\n      // 创建新的实例\n      this.instance = new Socket()\n\n      // 监听各种事件\n      this.instance.on('connect', () => {\n        console.log('socket 连接成功')\n        resolve()\n        clearTimeout(this.timer)\n      })\n\n      this.instance.on('close', () => {\n        console.log('关闭 socket 连接')\n        reject(new Error('socket 连接关闭'))\n      })\n\n      this.instance.on('error', (err) => {\n        console.log('socket 出错', err)\n        this.instance.destroy()\n      })\n\n      this.instance.on('data', (data) => {\n        this.data += data.toString(this.format)\n      })\n\n      const MAX_CONNECT_DURATION = 3000\n      this.timer = setTimeout(() => {\n        this.instance.destroy()\n      }, MAX_CONNECT_DURATION)\n\n      this.connect()\n    })\n  }\n\n  connect() {\n    if (!this.instance)\n      return\n    if (this.port)\n      this.instance.connect(this.port, this.address)\n    else this.instance.connect(this.address)\n  }\n\n  destroy() {\n    if (!this.instance)\n      return\n\n    this.instance.destroy()\n  }\n\n  write(data) {\n    if (!this.instance)\n      return\n\n    console.log('写入数据', data)\n    this.instance.write(data)\n  }\n\n  getData() {\n    if (!this.instance)\n      return\n\n    return this.data\n  }\n\n  setData(source: string) {\n    if (!this.instance)\n      return\n\n    this.data = source\n    return this.data\n  }\n}\n"],"names":["option","instance","data","address","port","format","timer","init","Promise","resolve","reject","Error","Socket","on","console","log","clearTimeout","err","destroy","toString","MAX_CONNECT_DURATION","setTimeout","connect","write","getData","setData","source"],"mappings":";;;;;;;;;;mBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER,IAAA,uBAFZ,AAEY;;oBAQDA,MAAoE;;QAPhF,uBAAQC,YAA0B;QAClC,uBAAQC,QAAO;QACf,uBAAQC,WAAU;QAClB,uBAAQC,QAAsB;QAC9B,uBAAQC,UAA0B;QAClC,uBAAQC,SAAQ;QAGd,IAAI,CAACH,UAAUH,OAAOG;QACtB,IAAI,CAACC,OAAOJ,mBAAAA,oBAAAA,KAAAA,IAAAA,OAAQI;QACpB,IAAI,CAACC,SAASL,CAAAA,mBAAAA,oBAAAA,KAAAA,IAAAA,OAAQK,MAAK,KAAK;;;;YAGlCE,KAAAA;mBAAAA,SAAAA;;gBACE,OAAO,IAAIC,QAAc,SAACC,SAASC;oBACjC,iBAAiB;oBACjB,IAAI,MAAKT,UACP,MAAM,IAAIU,MAAM;oBAElB,SAAS;oBACT,MAAKV,WAAW,IAAIW;oBAEpB,SAAS;oBACT,MAAKX,SAASY,GAAG,WAAW;wBAC1BC,QAAQC,IAAI;wBACZN;wBACAO,aAAa,MAAKV;oBACpB;oBAEA,MAAKL,SAASY,GAAG,SAAS;wBACxBC,QAAQC,IAAI;wBACZL,OAAO,IAAIC,MAAM;oBACnB;oBAEA,MAAKV,SAASY,GAAG,SAAS,SAACI;wBACzBH,QAAQC,IAAI,aAAaE;wBACzB,MAAKhB,SAASiB;oBAChB;oBAEA,MAAKjB,SAASY,GAAG,QAAQ,SAACX;wBACxB,MAAKA,QAAQA,KAAKiB,SAAS,MAAKd;oBAClC;oBAEA,IAAMe,uBAAuB;oBAC7B,MAAKd,QAAQe,WAAW;wBACtB,MAAKpB,SAASiB;oBAChB,GAAGE;oBAEH,MAAKE;gBACP;YACF;;;YAEAA,KAAAA;mBAAAA,SAAAA;gBACE,IAAI,CAAC,IAAI,CAACrB,UACR;gBACF,IAAI,IAAI,CAACG,MACP,IAAI,CAACH,SAASqB,QAAQ,IAAI,CAAClB,MAAM,IAAI,CAACD;qBACnC,IAAI,CAACF,SAASqB,QAAQ,IAAI,CAACnB;YAClC;;;YAEAe,KAAAA;mBAAAA,SAAAA;gBACE,IAAI,CAAC,IAAI,CAACjB,UACR;gBAEF,IAAI,CAACA,SAASiB;YAChB;;;YAEAK,KAAAA;mBAAAA,SAAAA,MAAMrB,IAAI;gBACR,IAAI,CAAC,IAAI,CAACD,UACR;gBAEFa,QAAQC,IAAI,QAAQb;gBACpB,IAAI,CAACD,SAASsB,MAAMrB;YACtB;;;YAEAsB,KAAAA;mBAAAA,SAAAA;gBACE,IAAI,CAAC,IAAI,CAACvB,UACR;gBAEF,OAAO,IAAI,CAACC;YACd;;;YAEAuB,KAAAA;mBAAAA,SAAAA,QAAQC,MAAc;gBACpB,IAAI,CAAC,IAAI,CAACzB,UACR;gBAEF,IAAI,CAACC,OAAOwB;gBACZ,OAAO,IAAI,CAACxB;YACd"}