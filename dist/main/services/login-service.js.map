{"version":3,"sources":["../../../src/main/services/login-service.ts"],"sourcesContent":["import { genMd5EncryptedPassword, genResponseData } from '@/utils'\nimport { queryUserByLoginName, queryUserByUserId } from '@/database/methods/user'\nimport prisma from '@/database'\n\nasync function onPasswordLogin({ username, password }: PasswordLoginProps) {\n  const user = await queryUserByLoginName(username)\n  if (user === null)\n    return genResponseData(false, '用户不存在')\n  const encryptedPassword = genMd5EncryptedPassword(username, password, user.salt)\n  if (user.password !== encryptedPassword)\n    return genResponseData(false, '密码错误')\n  return genResponseData(true, '登录成功', user)\n}\n\nasync function onCardLogin(cardNumber: string) {\n  const result = await prisma.rfid_card_user.findFirst({\n    where: {\n      card_data: cardNumber,\n    },\n    select: {\n      user_id: true,\n    },\n  })\n  if (result === null)\n    return genResponseData(false, '用户ID查找失败')\n\n  const userId = result?.user_id\n  const user = await queryUserByUserId(userId)\n  if (user === null)\n    return genResponseData(false, '用户查找失败')\n\n  return genResponseData(true, '登录成功', user)\n}\n\nconst loginService = {\n  name: 'login' as const,\n  fns: {\n    onPasswordLogin,\n    onCardLogin,\n  },\n}\n\nexport default loginService\n"],"names":["onPasswordLogin","username","password","user","encryptedPassword","queryUserByLoginName","genResponseData","genMd5EncryptedPassword","salt","onCardLogin","cardNumber","result","userId","prisma","rfid_card_user","findFirst","where","card_data","select","user_id","queryUserByUserId","loginService","name","fns"],"mappings":";;;;+BA0CA;;;eAAA;;;qBA1CyD;oBACD;+DACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEJA,gBAAgB,CAA0C;WAA1DA;;SAAAA;IAAAA,mBAAf,oBAAA,SAA+B,KAA0C;YAAxCC,UAAUC,UACnCC,MAGAC;;;;oBAJyBH,WAAF,MAAEA,UAAUC,WAAZ,MAAYA;oBAC5B;;wBAAMG,IAAAA,4BAAqBJ;;;oBAAlCE,OAAO;oBACb,IAAIA,SAAS,MACX;;wBAAOG,IAAAA,wBAAgB,OAAO;;oBAC1BF,oBAAoBG,IAAAA,gCAAwBN,UAAUC,UAAUC,KAAKK;oBAC3E,IAAIL,KAAKD,aAAaE,mBACpB;;wBAAOE,IAAAA,wBAAgB,OAAO;;oBAChC;;wBAAOA,IAAAA,wBAAgB,MAAM,QAAQH;;;;IACvC;WAReH;;SAUAS,YAAYC,UAAkB;WAA9BD;;SAAAA;IAAAA,eAAf,oBAAA,SAA2BC,UAAkB;YACrCC,QAWAC,QACAT;;;;oBAZS;;wBAAMU,kBAAOC,eAAeC,UAAU;4BACnDC,OAAO;gCACLC,WAAWP;4BACb;4BACAQ,QAAQ;gCACNC,SAAS;4BACX;wBACF;;;oBAPMR,SAAS;oBAQf,IAAIA,WAAW,MACb;;wBAAOL,IAAAA,wBAAgB,OAAO;;oBAE1BM,SAASD,mBAAAA,oBAAAA,KAAAA,IAAAA,OAAQQ;oBACV;;wBAAMC,IAAAA,yBAAkBR;;;oBAA/BT,OAAO;oBACb,IAAIA,SAAS,MACX;;wBAAOG,IAAAA,wBAAgB,OAAO;;oBAEhC;;wBAAOA,IAAAA,wBAAgB,MAAM,QAAQH;;;;IACvC;WAlBeM;;AAoBf,IAAMY,eAAe;IACnBC,MAAM;IACNC,KAAK;QACHvB,iBAAAA;QACAS,aAAAA;IACF;AACF;IAEA,WAAeY"}