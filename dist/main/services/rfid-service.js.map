{"version":3,"sources":["../../../src/main/services/rfid-service.ts"],"sourcesContent":["import { Buffer } from 'buffer'\nimport { binaryToHex, generateBinaryString, generateCRC16Code, getTIDByReportData, parseRFIDReportData } from '@/utils'\nimport Socket from '@/utils/socket'\n\ntype InstanceMap = {\n  [k in string]: Socket\n}\n\nconst instanceMap: InstanceMap = {}\n\nfunction generateAntennaCommand(antennaIds: number[]) {\n  const binary = generateBinaryString(antennaIds)\n  const command = binaryToHex(binary)\n  return command\n}\n\nasync function init(address: string, port: number) {\n  if (instanceMap[address])\n    return true\n\n  instanceMap[address] = new Socket({ address, port })\n\n  try {\n    await instanceMap[address].init()\n    return true\n  }\n  catch (e) {\n    console.log(e, 'rfid socket 连接失败')\n    return false\n  }\n}\n\nfunction destroy(address: string) {\n  if (!instanceMap[address])\n    return\n\n  instanceMap[address].destroy()\n  instanceMap[address] = null\n}\n\nfunction sendCloseCommand(address: string) {\n  if (!instanceMap[address])\n    return\n\n  instanceMap[address].write(Buffer.from('5A000102FF0000885A', 'hex'))\n}\n\nfunction sendOpenCommand(address: string, antennaIds: number[]) {\n  if (!instanceMap[address])\n    return\n\n  const COMMAND_HEADER = '5A'\n  const commandBody = `000102100008${generateAntennaCommand(antennaIds)}01020006`\n  const checkCode = generateCRC16Code(commandBody)\n  const command = COMMAND_HEADER + commandBody + checkCode\n\n  instanceMap[address].write(Buffer.from(command, 'hex'))\n}\n\nexport function getReportData(address: string) {\n  if (!instanceMap[address]) {\n    console.log('socket 连接不存在')\n    return []\n  }\n\n  const data = instanceMap[address].getData()\n  const reportData = parseRFIDReportData(data)\n  const TIDList = [...new Set(reportData.map(item => getTIDByReportData(item)))]\n\n  return TIDList\n}\n\nconst rfidService = {\n  name: 'rfid' as const,\n  fns: {\n    init,\n    destroy,\n    sendCloseCommand,\n    sendOpenCommand,\n    getReportData,\n  },\n}\n\nexport default rfidService\n"],"names":["getReportData","instanceMap","generateAntennaCommand","antennaIds","binary","generateBinaryString","command","binaryToHex","init","address","port","e","Socket","console","log","destroy","sendCloseCommand","write","Buffer","from","sendOpenCommand","COMMAND_HEADER","commandBody","checkCode","generateCRC16Code","data","getData","reportData","parseRFIDReportData","TIDList","Set","map","item","getTIDByReportData","rfidService","name","fns"],"mappings":";;;;;;;;;;;IA2DgBA,aAAa;eAAbA;;IAwBhB,OAA0B;eAA1B;;;sBAnFuB;qBACuF;6DAC3F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMnB,IAAMC,cAA2B,CAAC;AAElC,SAASC,uBAAuBC,UAAoB;IAClD,IAAMC,SAASC,IAAAA,6BAAqBF;IACpC,IAAMG,UAAUC,IAAAA,oBAAYH;IAC5B,OAAOE;AACT;SAEeE,KAAKC,OAAe,EAAEC,IAAY;WAAlCF;;SAAAA;IAAAA,QAAf,oBAAA,SAAoBC,OAAe,EAAEC,IAAY;YAUxCC;;;;oBATP,IAAIV,WAAW,CAACQ,QAAQ,EACtB;;wBAAO;;oBAETR,WAAW,CAACQ,QAAQ,GAAG,IAAIG,gBAAO;wBAAEH,SAAAA;wBAASC,MAAAA;oBAAK;;;;;;;;;oBAGhD;;wBAAMT,WAAW,CAACQ,QAAQ,CAACD;;;oBAA3B;oBACA;;wBAAO;;;oBAEFG;oBACLE,QAAQC,IAAIH,GAAG;oBACf;;wBAAO;;;;;;;;IAEX;WAdeH;;AAgBf,SAASO,QAAQN,OAAe;IAC9B,IAAI,CAACR,WAAW,CAACQ,QAAQ,EACvB;IAEFR,WAAW,CAACQ,QAAQ,CAACM;IACrBd,WAAW,CAACQ,QAAQ,GAAG;AACzB;AAEA,SAASO,iBAAiBP,OAAe;IACvC,IAAI,CAACR,WAAW,CAACQ,QAAQ,EACvB;IAEFR,WAAW,CAACQ,QAAQ,CAACQ,MAAMC,eAAOC,KAAK,sBAAsB;AAC/D;AAEA,SAASC,gBAAgBX,OAAe,EAAEN,UAAoB;IAC5D,IAAI,CAACF,WAAW,CAACQ,QAAQ,EACvB;IAEF,IAAMY,iBAAiB;IACvB,IAAMC,cAAc,AAAC,eAAiD,OAAnCpB,uBAAuBC,aAAY;IACtE,IAAMoB,YAAYC,IAAAA,0BAAkBF;IACpC,IAAMhB,UAAUe,iBAAiBC,cAAcC;IAE/CtB,WAAW,CAACQ,QAAQ,CAACQ,MAAMC,eAAOC,KAAKb,SAAS;AAClD;AAEO,SAASN,cAAcS,OAAe;IAC3C,IAAI,CAACR,WAAW,CAACQ,QAAQ,EAAE;QACzBI,QAAQC,IAAI;QACZ,OAAO,EAAE;IACX;IAEA,IAAMW,OAAOxB,WAAW,CAACQ,QAAQ,CAACiB;IAClC,IAAMC,aAAaC,IAAAA,4BAAoBH;IACvC,IAAMI,UAAW,qBAAG,IAAIC,IAAIH,WAAWI,IAAIC,SAAAA;eAAQC,IAAAA,2BAAmBD;;IAEtE,OAAOH;AACT;AAEA,IAAMK,cAAc;IAClBC,MAAM;IACNC,KAAK;QACH5B,MAAAA;QACAO,SAAAA;QACAC,kBAAAA;QACAI,iBAAAA;QACApB,eAAAA;IACF;AACF;IAEA,WAAekC"}