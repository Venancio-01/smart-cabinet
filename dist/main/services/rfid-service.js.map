{"version":3,"sources":["../../../src/main/services/rfid-service.ts"],"sourcesContent":["import { binaryToHex, generateBinaryString, generateCRC16Code, getTIDByReportData, parseRFIDReportData } from '@/utils'\nimport Socket from '@/utils/socket'\n\ntype InstanceMap = {\n  [k in string]: Socket\n}\n\nconst instanceMap: InstanceMap = {}\n\nconst generateAntennaCommand = (antennaIds: number[]) => {\n  const binary = generateBinaryString(antennaIds)\n  const command = binaryToHex(binary)\n  return command\n}\n\nconst init = async (address: string, port: number) => {\n  if (instanceMap[address]) return true\n\n  instanceMap[address] = new Socket({ address, port })\n\n  try {\n    await instanceMap[address].init()\n    return true\n  } catch (e) {\n    console.log(e, 'rfid socket 连接失败')\n    return false\n  }\n}\n\nconst destroy = (address: string) => {\n  if (!instanceMap[address]) return\n\n  instanceMap[address].destroy()\n  instanceMap[address] = null\n}\n\nconst sendCloseCommand = (address: string) => {\n  if (!instanceMap[address]) return\n\n  instanceMap[address].write(Buffer.from('5A000102FF0000885A', 'hex'))\n}\n\nconst sendOpenCommand = (address: string, antennaIds: number[]) => {\n  if (!instanceMap[address]) return\n\n  const COMMAND_HEADER = '5A'\n  const commandBody = `000102100008${generateAntennaCommand(antennaIds)}01020006`\n  const checkCode = generateCRC16Code(commandBody)\n  const command = COMMAND_HEADER + commandBody + checkCode\n\n  instanceMap[address].write(Buffer.from(command, 'hex'))\n}\n\nexport const getReportData = (address: string) => {\n  if (!instanceMap[address]) {\n    console.log('socket 连接不存在')\n    return []\n  }\n\n  const data = instanceMap[address].getData()\n  const reportData = parseRFIDReportData(data)\n  const TIDList = [...new Set(reportData.map(item => getTIDByReportData(item)))]\n\n  return TIDList\n}\n\nconst rfidService = {\n  name: 'rfid' as const,\n  fns: {\n    init,\n    destroy,\n    sendCloseCommand,\n    sendOpenCommand,\n    getReportData\n  }\n}\n\nexport default rfidService\n\n"],"names":["getReportData","instanceMap","generateAntennaCommand","antennaIds","binary","generateBinaryString","command","binaryToHex","init","address","port","Socket","e","console","log","destroy","sendCloseCommand","write","Buffer","from","sendOpenCommand","COMMAND_HEADER","commandBody","checkCode","generateCRC16Code","data","getData","reportData","parseRFIDReportData","TIDList","Set","map","item","getTIDByReportData","rfidService","name","fns"],"mappings":";;;;;;;;;;;IAqDaA,aAAa;eAAbA;;IAwBb,OAA0B;eAA1B;;;uBA7E8G;+DAC3F;;;;;;AAMnB,MAAMC,cAA2B,CAAC;AAElC,MAAMC,yBAAyB,CAACC;IAC9B,MAAMC,SAASC,IAAAA,6BAAqBF;IACpC,MAAMG,UAAUC,IAAAA,oBAAYH;IAC5B,OAAOE;AACT;AAEA,MAAME,OAAO,OAAOC,SAAiBC;IACnC,IAAIT,WAAW,CAACQ,QAAQ,EAAE,OAAO;IAEjCR,WAAW,CAACQ,QAAQ,GAAG,IAAIE,gBAAO;QAAEF;QAASC;IAAK;IAElD,IAAI;QACF,MAAMT,WAAW,CAACQ,QAAQ,CAACD;QAC3B,OAAO;IACT,EAAE,OAAOI,GAAG;QACVC,QAAQC,IAAIF,GAAG;QACf,OAAO;IACT;AACF;AAEA,MAAMG,UAAU,CAACN;IACf,IAAI,CAACR,WAAW,CAACQ,QAAQ,EAAE;IAE3BR,WAAW,CAACQ,QAAQ,CAACM;IACrBd,WAAW,CAACQ,QAAQ,GAAG;AACzB;AAEA,MAAMO,mBAAmB,CAACP;IACxB,IAAI,CAACR,WAAW,CAACQ,QAAQ,EAAE;IAE3BR,WAAW,CAACQ,QAAQ,CAACQ,MAAMC,OAAOC,KAAK,sBAAsB;AAC/D;AAEA,MAAMC,kBAAkB,CAACX,SAAiBN;IACxC,IAAI,CAACF,WAAW,CAACQ,QAAQ,EAAE;IAE3B,MAAMY,iBAAiB;IACvB,MAAMC,cAAc,CAAC,YAAY,EAAEpB,uBAAuBC,YAAY,QAAQ,CAAC;IAC/E,MAAMoB,YAAYC,IAAAA,0BAAkBF;IACpC,MAAMhB,UAAUe,iBAAiBC,cAAcC;IAE/CtB,WAAW,CAACQ,QAAQ,CAACQ,MAAMC,OAAOC,KAAKb,SAAS;AAClD;AAEO,MAAMN,gBAAgB,CAACS;IAC5B,IAAI,CAACR,WAAW,CAACQ,QAAQ,EAAE;QACzBI,QAAQC,IAAI;QACZ,OAAO,EAAE;IACX;IAEA,MAAMW,OAAOxB,WAAW,CAACQ,QAAQ,CAACiB;IAClC,MAAMC,aAAaC,IAAAA,4BAAoBH;IACvC,MAAMI,UAAU;WAAI,IAAIC,IAAIH,WAAWI,IAAIC,CAAAA,OAAQC,IAAAA,2BAAmBD;KAAQ;IAE9E,OAAOH;AACT;AAEA,MAAMK,cAAc;IAClBC,MAAM;IACNC,KAAK;QACH5B;QACAO;QACAC;QACAI;QACApB;IACF;AACF;MAEA,WAAekC"}