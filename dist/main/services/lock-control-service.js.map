{"version":3,"sources":["../../../src/main/services/lock-control-service.ts"],"sourcesContent":["import { convertDecimalToBinary, generateLockCommand } from '@/utils'\nimport SerialPort from '@/utils/serial-port'\nimport { execSync } from 'child_process'\nimport { SerialPort as SerialPortLib } from 'serialport'\n\n// 串口实例\nlet instance: SerialPort | null = null\nlet connected = false\n\nconst getConnectState = async (path: string) => {\n  const list = await SerialPortLib.list()\n  connected = Boolean(list.find(item => item.path === path))\n  return connected\n}\n\n// 设置串口权限\nconst setPermissions = async () => {\n  try {\n    await execSync('sudo chmod 777 /dev/ttyUSB0')\n    console.log('设置串口权限成功')\n  } catch (error) {\n    console.log('设置串口权限失败')\n  }\n}\n\nconst init = async (path: string, baudRate: number) => {\n  if (instance) return\n\n  await setPermissions()\n\n  if (!connected) {\n    console.log('未连接锁控板，初始化失败')\n    return\n  }\n\n  instance = new SerialPort({ path, baudRate })\n  await instance.open()\n  await instance.close()\n  await instance.open()\n}\n\nconst close = async () => {\n  if (!instance) return\n\n  instance.close()\n}\n\n/**\n * @description: 查询锁状态\n * @return {*}\n */\nconst queryAllState = () => {\n  if (!instance) return false\n\n  const command = generateLockCommand('80010033')\n  instance.write(command)\n}\n\n/**\n * @description: 开锁\n * @param {string} boardAddress 板地址，格式 01、02\n * @param {string} lockAddress 锁地址，格式 01、02\n * @return {*}\n */\nconst open = (boardAddress = '01', lockAddress = '01') => {\n  if (!instance) return false\n\n  const command = generateLockCommand(`8a${boardAddress}${lockAddress}11`)\n  instance.write(command)\n}\n\n/**\n * @description: 开启全部锁\n * @return {*}\n */\nconst openAll = () => {\n  if (!instance) return false\n\n  const command = generateLockCommand('8a010011')\n  instance.write(command)\n}\n\n/**\n * @description: 获取门锁开启状态\n * @return {*}\n */\nconst getOpenStatus = (): null | LockControlStateProps => {\n  if (!instance) {\n    console.log('实例未初始化')\n    return null\n  }\n\n  const COMMAND_HEADER = '8001'\n  const MAX_LOCK_COUNT = 24\n  const data = instance.getData()\n\n  // 找出命令的返回结果\n  const commandHeaderIndex = data.indexOf(COMMAND_HEADER)\n  const commandBody = data.slice(commandHeaderIndex + COMMAND_HEADER.length, commandHeaderIndex + COMMAND_HEADER.length + 10)\n\n  // 锁控板命令未接收完整\n  if (commandBody.length < 10) return null\n\n  // 最多一次查询 24 个锁的状态，分三组，每组 8 个锁，转化为 2 进制后格式为 00000001 ，0 代表开启，1 代表关闭\n  //17 - 24 锁控状态\n  const lockGroup_3 = convertDecimalToBinary(Number(commandBody.slice(0, 2)))\n  // 9 - 16 锁控状态\n  const lockGroup_2 = convertDecimalToBinary(Number(commandBody.slice(2, 4)))\n  // 1 - 8 锁控状态\n  const lockGroup_1 = convertDecimalToBinary(Number(commandBody.slice(4, 6)))\n\n  const result = new Array(MAX_LOCK_COUNT).fill(0).reduce((acc, cur, index) => {\n    const group = index < 8 ? lockGroup_1 : index < 16 ? lockGroup_2 : lockGroup_3\n    const lockIndex = index < 8 ? index : index < 16 ? index - 8 : index - 16\n    acc[index + 1] = group[lockIndex] === '0'\n\n    return acc\n  }, {})\n\n  instance.setData('')\n\n  return result\n}\n\nconst lockControlService = {\n  name: 'lockControl' as const,\n  fns: {\n    getConnectState,\n    init,\n    close,\n    queryAllState,\n    open,\n    openAll,\n    getOpenStatus\n  }\n}\n\nexport default lockControlService\n\n"],"names":["instance","connected","getConnectState","path","list","SerialPortLib","Boolean","find","item","setPermissions","execSync","console","log","error","init","baudRate","SerialPort","open","close","queryAllState","command","generateLockCommand","write","boardAddress","lockAddress","openAll","getOpenStatus","COMMAND_HEADER","MAX_LOCK_COUNT","data","getData","commandHeaderIndex","indexOf","commandBody","slice","length","lockGroup_3","convertDecimalToBinary","Number","lockGroup_2","lockGroup_1","result","Array","fill","reduce","acc","cur","index","group","lockIndex","setData","lockControlService","name","fns"],"mappings":";;;;+BAyIA;;;eAAA;;;uBAzI4D;mEACrC;+BACE;6BACmB;;;;;;AAE5C,OAAO;AACP,IAAIA,WAA8B;AAClC,IAAIC,YAAY;AAEhB,MAAMC,kBAAkB,OAAOC;IAC7B,MAAMC,OAAO,MAAMC,wBAAcD;IACjCH,YAAYK,QAAQF,KAAKG,KAAKC,CAAAA,OAAQA,KAAKL,SAASA;IACpD,OAAOF;AACT;AAEA,SAAS;AACT,MAAMQ,iBAAiB;IACrB,IAAI;QACF,MAAMC,IAAAA,yBAAS;QACfC,QAAQC,IAAI;IACd,EAAE,OAAOC,OAAO;QACdF,QAAQC,IAAI;IACd;AACF;AAEA,MAAME,OAAO,OAAOX,MAAcY;IAChC,IAAIf,UAAU;IAEd,MAAMS;IAEN,IAAI,CAACR,WAAW;QACdU,QAAQC,IAAI;QACZ;IACF;IAEAZ,WAAW,IAAIgB,oBAAW;QAAEb;QAAMY;IAAS;IAC3C,MAAMf,SAASiB;IACf,MAAMjB,SAASkB;IACf,MAAMlB,SAASiB;AACjB;AAEA,MAAMC,QAAQ;IACZ,IAAI,CAAClB,UAAU;IAEfA,SAASkB;AACX;AAEA;;;CAGC,GACD,MAAMC,gBAAgB;IACpB,IAAI,CAACnB,UAAU,OAAO;IAEtB,MAAMoB,UAAUC,IAAAA,4BAAoB;IACpCrB,SAASsB,MAAMF;AACjB;AAEA;;;;;CAKC,GACD,MAAMH,OAAO,CAACM,eAAe,IAAI,EAAEC,cAAc,IAAI;IACnD,IAAI,CAACxB,UAAU,OAAO;IAEtB,MAAMoB,UAAUC,IAAAA,4BAAoB,CAAC,EAAE,EAAEE,aAAa,EAAEC,YAAY,EAAE,CAAC;IACvExB,SAASsB,MAAMF;AACjB;AAEA;;;CAGC,GACD,MAAMK,UAAU;IACd,IAAI,CAACzB,UAAU,OAAO;IAEtB,MAAMoB,UAAUC,IAAAA,4BAAoB;IACpCrB,SAASsB,MAAMF;AACjB;AAEA;;;CAGC,GACD,MAAMM,gBAAgB;IACpB,IAAI,CAAC1B,UAAU;QACbW,QAAQC,IAAI;QACZ,OAAO;IACT;IAEA,MAAMe,iBAAiB;IACvB,MAAMC,iBAAiB;IACvB,MAAMC,OAAO7B,SAAS8B;IAEtB,YAAY;IACZ,MAAMC,qBAAqBF,KAAKG,QAAQL;IACxC,MAAMM,cAAcJ,KAAKK,MAAMH,qBAAqBJ,eAAeQ,QAAQJ,qBAAqBJ,eAAeQ,SAAS;IAExH,aAAa;IACb,IAAIF,YAAYE,SAAS,IAAI,OAAO;IAEpC,mEAAmE;IACnE,cAAc;IACd,MAAMC,cAAcC,IAAAA,+BAAuBC,OAAOL,YAAYC,MAAM,GAAG;IACvE,cAAc;IACd,MAAMK,cAAcF,IAAAA,+BAAuBC,OAAOL,YAAYC,MAAM,GAAG;IACvE,aAAa;IACb,MAAMM,cAAcH,IAAAA,+BAAuBC,OAAOL,YAAYC,MAAM,GAAG;IAEvE,MAAMO,SAAS,IAAIC,MAAMd,gBAAgBe,KAAK,GAAGC,OAAO,CAACC,KAAKC,KAAKC;QACjE,MAAMC,QAAQD,QAAQ,IAAIP,cAAcO,QAAQ,KAAKR,cAAcH;QACnE,MAAMa,YAAYF,QAAQ,IAAIA,QAAQA,QAAQ,KAAKA,QAAQ,IAAIA,QAAQ;QACvEF,GAAG,CAACE,QAAQ,EAAE,GAAGC,KAAK,CAACC,UAAU,KAAK;QAEtC,OAAOJ;IACT,GAAG,CAAC;IAEJ7C,SAASkD,QAAQ;IAEjB,OAAOT;AACT;AAEA,MAAMU,qBAAqB;IACzBC,MAAM;IACNC,KAAK;QACHnD;QACAY;QACAI;QACAC;QACAF;QACAQ;QACAC;IACF;AACF;MAEA,WAAeyB"}