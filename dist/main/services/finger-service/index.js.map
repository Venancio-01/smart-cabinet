{"version":3,"sources":["../../../../src/main/services/finger-service/index.ts"],"sourcesContent":["import {\n  initDeviceSDK,\n  destroyDeviceSDK,\n  captureFingerImage,\n  closeDeviceByHandle,\n  getDeviceCount,\n  getParameterByHandle,\n  openDeviceByHandle\n} from './device-func'\nimport {\n  initAlgorithmSDK,\n  destroyAlgorithmSDK,\n  addTemplateToDb,\n  closeAlgorithm,\n  extractTemplate,\n  generateTemplate,\n  identifyTemplate,\n  initAlgorithm,\n  verifyTemplate,\n  checkFileExist\n} from './algorithm-func'\nimport { DeviceArrayType, IntType, TemplateType, UcharType } from './types'\nimport { MAX_DEVICE_NUM, MAX_REGISTRATION_COUNT, TEMPLATE_BYTE_LENGTH } from '@/config'\nimport { genResponseData } from '@/utils'\nimport { addFinger, queryFingerByUserIdAndOrder, updateFingerByUserIdAndOrder } from '@/database/methods/finger'\nimport prisma from '@/database'\n\n// 指纹仪设备数组\nconst deviceList = new DeviceArrayType(MAX_DEVICE_NUM)\n// 当前指纹仪在线状态\nlet connected = false\n// 当前指纹仪开启状态\nlet isOpen = false\n// 当前接入的指纹仪设备句柄\nlet deviceHandle = null\n// 指纹图像数据\nlet imageBuffer = null\n// 指纹设备宽高\nlet deviceWidth = 0\nlet deviceHeight = 0\n// 算法句柄\nlet algorithmHandler = null\n// 注册时，采集指纹数据数组\nlet registerTemplates = []\n// 注册时，当前按压指纹次数索引\nlet registerCurrentIndex = 0\n\n// 指纹对应的用户数据\nlet userFingerData = []\n\n\nconst initSDK = () => {\n  checkFileExist()\n  initDeviceSDK()\n  initAlgorithmSDK()\n}\n\nconst destroySDK = () => {\n  destroyDeviceSDK()\n  destroyAlgorithmSDK()\n}\n\n/**\n * @description: 查询当前设备在线情况\n * @return {*}\n */\nconst queryConnectState = (): boolean => {\n  const count = getDeviceCount(deviceList, MAX_DEVICE_NUM)\n  console.log(\"指纹仪连接数量：\", count)\n  connected = count > 0\n  return connected\n}\n\n/**\n * @description: 打开指纹仪设备\n * @return {*}\n */\nconst openDevice = () => {\n  if (!connected) return false\n  if (isOpen) return true\n\n  // 开启设备\n  deviceHandle = openDeviceByHandle(deviceList[0].ref())\n\n  // 获取设备参数\n  getParameter()\n  // 初始化算法\n  algorithmHandler = initAlgorithm(deviceWidth, deviceHeight)\n\n  const success = deviceHandle.deref() !== null && algorithmHandler.deref() !== null\n  isOpen = success\n\n  loadAllTemplate()\n\n  return success\n}\n\n/**\n * @description: 关闭指纹仪设备\n * @return {*}\n */\nconst closeDevice = () => {\n  if (!connected || !isOpen) return false\n\n  //关闭设备\n  const deviceCloseResult = closeDeviceByHandle(deviceHandle)\n  // 关闭算法\n  const algorithmCloseResult = closeAlgorithm(algorithmHandler)\n\n  const success = deviceCloseResult === 0 && algorithmCloseResult === 1\n  // 重置指纹仪相关变量\n  if (success) {\n    isOpen = false\n    deviceHandle = null\n    imageBuffer = null\n    deviceWidth = 0\n    deviceHeight = 0\n    algorithmHandler = null\n    registerTemplates = []\n    registerCurrentIndex = 0\n  }\n\n  return success\n}\n\n/**\n * @description: 获取指纹仪宽高\n * @return {*}\n */\nconst getParameter = () => {\n  deviceWidth = getParameterByHandle(deviceHandle, 1)\n  deviceHeight = getParameterByHandle(deviceHandle, 2)\n  imageBuffer = new UcharType(deviceWidth * deviceHeight)\n}\n\n/**\n * @description: 开始采集指纹\n * @return {*}\n */\nconst startFingerCapture = () => {\n  if (!connected || !isOpen) return false\n\n  // 获取指纹仪捕获到的图像\n  const result = captureFingerImage(deviceHandle, imageBuffer, deviceWidth * deviceHeight)\n  if (result <= 0) return false\n\n  const templateData = new UcharType(2048)\n  // 提取图像\n  const templateDataLen = extractTemplate(algorithmHandler, imageBuffer, deviceWidth, deviceHeight, templateData, 2048)\n\n  if (templateDataLen <= 0) return false\n\n  return templateData\n}\n\nconst handleRegister = async (userId, order) => {\n  let result = null\n  const templateData = startFingerCapture()\n\n  if (templateData) {\n    result = await onRegister(templateData, userId, order)\n  }\n  return result\n}\n\n/**\n * @description: 注册指纹\n * @return {*}\n */\nconst onRegister = async (templateData, userId, order) => {\n  const resetRegisterData = () => {\n    registerCurrentIndex = 0\n    registerTemplates = []\n  }\n\n  const { success: isRegistered } = onIdentify(templateData)\n  if (isRegistered) {\n    resetRegisterData()\n    return genResponseData(false, '登记失败，当前手指已登记', { alert: true })\n  }\n\n  if (registerCurrentIndex >= MAX_REGISTRATION_COUNT) {\n    resetRegisterData()\n    return genResponseData(false)\n  }\n\n  if (registerCurrentIndex > 0) {\n    // 对比前后两次采集的指纹\n    const success = verifyTemplate(algorithmHandler, registerTemplates[registerCurrentIndex - 1], templateData)\n    if (!success) {\n      resetRegisterData()\n      return genResponseData(false, '登记失败，请按压同一个手指', { alert: true })\n    }\n  }\n\n  registerTemplates[registerCurrentIndex] = templateData\n  registerCurrentIndex++\n\n  if (registerCurrentIndex !== MAX_REGISTRATION_COUNT) {\n    return genResponseData(true, `您还需要按压${MAX_REGISTRATION_COUNT - registerCurrentIndex}次手指`)\n  }\n\n  const regTemplates = new TemplateType(registerTemplates)\n  const registerTemplateData = new UcharType(TEMPLATE_BYTE_LENGTH)\n  const { success: genTempSuccess, result: genTempResult } = generateTemplate(\n    algorithmHandler,\n    regTemplates,\n    MAX_REGISTRATION_COUNT,\n    registerTemplateData\n  )\n\n  if (!genTempSuccess) {\n    resetRegisterData()\n    return genResponseData(false, `生成登记模板失败，错误代码 = ${genTempResult}`, { alert: true })\n  }\n  const { success: addDbSuccess, result } = addTemplateToDb(algorithmHandler, 9999, genTempResult, registerTemplateData)\n\n  if (!addDbSuccess) {\n    resetRegisterData()\n    return genResponseData(true, `添加指纹失败，错误代码 = ${result}`, { alert: true })\n  }\n\n  const fingerData = await queryFingerByUserIdAndOrder(userId, order)\n  const data = registerTemplateData.buffer.toString('base64')\n  const orderText = order === 1 ? '一' : '二'\n  if (fingerData !== null) {\n    try {\n      await updateFingerByUserIdAndOrder(userId, order, data)\n      resetRegisterData()\n      return genResponseData(true, `指纹${orderText}更新成功`, { registerSuccess: true, alert: true })\n    } catch (e) {\n      resetRegisterData()\n      return genResponseData(false, `指纹${orderText}更新失败`, { alert: true })\n    }\n  } else {\n    try {\n      await addFinger(userId, order, data)\n      resetRegisterData()\n      return genResponseData(true, `指纹${orderText}添加成功`, { registerSuccess: true, alert: true })\n    } catch (e) {\n      resetRegisterData()\n      return genResponseData(false, `指纹${orderText}添加失败`, { alert: true })\n    }\n  }\n}\n\n/**\n     * @description: 识别指纹\n     * @return {*}\n     */\nconst onIdentify = (templateData) => {\n  const score = new IntType(1)\n  const fingerId = new IntType(1)\n  const result = identifyTemplate(algorithmHandler, templateData, fingerId, score)\n  const success = result === 1\n  const msg = success ? '识别成功!' : '识别失败'\n  const fingerIndex = fingerId[0] - 1\n  const userId = userFingerData[fingerIndex]?.user_id\n  return genResponseData(success, msg, userId)\n}\n\nconst handleIdentify = () => {\n  let result = null\n  const templateData = startFingerCapture()\n\n  if (templateData) {\n    result = onIdentify(templateData)\n  }\n\n  return result\n}\n\n/**\n    * @description: 加载数据库指纹模板到内存\n    * @return {*}\n    */\nconst loadAllTemplate = async () => {\n  userFingerData = await prisma.rfid_finger_user.findMany({\n    select: {\n      data: true,\n      user_id: true\n    }\n  })\n  if (userFingerData.length === 0) return\n\n  userFingerData.forEach((item, index) => {\n    if (item.data) {\n      const buf = Buffer.from(item.data, 'base64')\n      addTemplateToDb(algorithmHandler, index + 1, TEMPLATE_BYTE_LENGTH, buf)\n    }\n  })\n}\n\n\n\nconst fingerService = {\n  name: 'finger' as const,\n  fns: {\n    initSDK,\n    destroySDK,\n    queryConnectState,\n    openDevice,\n    closeDevice,\n    getParameter,\n    startFingerCapture,\n    handleRegister,\n    onRegister,\n    onIdentify,\n    handleIdentify,\n    loadAllTemplate,\n  }\n}\n\nexport default fingerService\n"],"names":["deviceList","DeviceArrayType","MAX_DEVICE_NUM","connected","isOpen","deviceHandle","imageBuffer","deviceWidth","deviceHeight","algorithmHandler","registerTemplates","registerCurrentIndex","userFingerData","initSDK","checkFileExist","initDeviceSDK","initAlgorithmSDK","destroySDK","destroyDeviceSDK","destroyAlgorithmSDK","queryConnectState","count","getDeviceCount","console","log","openDevice","openDeviceByHandle","ref","getParameter","initAlgorithm","success","deref","loadAllTemplate","closeDevice","deviceCloseResult","closeDeviceByHandle","algorithmCloseResult","closeAlgorithm","getParameterByHandle","UcharType","startFingerCapture","result","captureFingerImage","templateData","templateDataLen","extractTemplate","handleRegister","userId","order","onRegister","resetRegisterData","isRegistered","onIdentify","genResponseData","alert","MAX_REGISTRATION_COUNT","verifyTemplate","regTemplates","TemplateType","registerTemplateData","TEMPLATE_BYTE_LENGTH","genTempSuccess","genTempResult","generateTemplate","addDbSuccess","addTemplateToDb","fingerData","queryFingerByUserIdAndOrder","data","buffer","toString","orderText","updateFingerByUserIdAndOrder","registerSuccess","e","addFinger","score","IntType","fingerId","identifyTemplate","msg","fingerIndex","user_id","handleIdentify","prisma","rfid_finger_user","findMany","select","length","forEach","item","index","buf","Buffer","from","fingerService","name","fns"],"mappings":"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"}