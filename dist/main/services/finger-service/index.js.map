{"version":3,"sources":["../../../../src/main/services/finger-service/index.ts"],"sourcesContent":["import Buffer from 'buffer'\nimport {\n  captureFingerImage,\n  closeDeviceByHandle,\n  destroyDeviceSDK,\n  getDeviceCount,\n  getParameterByHandle,\n  initDeviceSDK,\n  openDeviceByHandle,\n} from './device-func'\nimport {\n  addTemplateToDb,\n  checkFileExist,\n  closeAlgorithm,\n  destroyAlgorithmSDK,\n  extractTemplate,\n  generateTemplate,\n  identifyTemplate,\n  initAlgorithm,\n  initAlgorithmSDK,\n  verifyTemplate,\n} from './algorithm-func'\nimport { DeviceArrayType, IntType, TemplateType, UcharType } from './types'\nimport { MAX_DEVICE_NUM, MAX_REGISTRATION_COUNT, TEMPLATE_BYTE_LENGTH } from '@/config'\nimport { genResponseData } from '@/utils'\nimport { addFinger, queryFingerByUserIdAndOrder, updateFingerByUserIdAndOrder } from '@/database/methods/finger'\nimport prisma from '@/database'\n\n// 指纹仪设备数组\nconst deviceList = new DeviceArrayType(MAX_DEVICE_NUM)\n// 当前指纹仪在线状态\nlet connected = false\n// 当前指纹仪开启状态\nlet isOpen = false\n// 当前接入的指纹仪设备句柄\nlet deviceHandle = null\n// 指纹图像数据\nlet imageBuffer = null\n// 指纹设备宽高\nlet deviceWidth = 0\nlet deviceHeight = 0\n// 算法句柄\nlet algorithmHandler = null\n// 注册时，采集指纹数据数组\nlet registerTemplates = []\n// 注册时，当前按压指纹次数索引\nlet registerCurrentIndex = 0\n\n// 指纹对应的用户数据\nlet userFingerData = []\n\nfunction initSDK() {\n  checkFileExist()\n  initDeviceSDK()\n  initAlgorithmSDK()\n}\n\nfunction destroySDK() {\n  destroyDeviceSDK()\n  destroyAlgorithmSDK()\n}\n\n/**\n * @description: 查询当前设备在线情况\n * @return {*}\n */\nfunction queryConnectState(): boolean {\n  const count = getDeviceCount(deviceList, MAX_DEVICE_NUM)\n  console.log('指纹仪连接数量：', count)\n  connected = count > 0\n  return connected\n}\n\n/**\n * @description: 打开指纹仪设备\n * @return {*}\n */\nfunction openDevice() {\n  if (!connected)\n    return false\n  if (isOpen)\n    return true\n\n  // 开启设备\n  deviceHandle = openDeviceByHandle(deviceList[0].ref())\n\n  // 获取设备参数\n  getParameter()\n  // 初始化算法\n  algorithmHandler = initAlgorithm(deviceWidth, deviceHeight)\n\n  const success = deviceHandle.deref() !== null && algorithmHandler.deref() !== null\n  isOpen = success\n\n  loadAllTemplate()\n\n  return success\n}\n\n/**\n * @description: 关闭指纹仪设备\n * @return {*}\n */\nfunction closeDevice() {\n  if (!connected || !isOpen)\n    return false\n\n  // 关闭设备\n  const deviceCloseResult = closeDeviceByHandle(deviceHandle)\n  // 关闭算法\n  const algorithmCloseResult = closeAlgorithm(algorithmHandler)\n\n  const success = deviceCloseResult === 0 && algorithmCloseResult === 1\n  // 重置指纹仪相关变量\n  if (success) {\n    isOpen = false\n    deviceHandle = null\n    imageBuffer = null\n    deviceWidth = 0\n    deviceHeight = 0\n    algorithmHandler = null\n    registerTemplates = []\n    registerCurrentIndex = 0\n  }\n\n  return success\n}\n\n/**\n * @description: 获取指纹仪宽高\n * @return {*}\n */\nfunction getParameter() {\n  deviceWidth = getParameterByHandle(deviceHandle, 1)\n  deviceHeight = getParameterByHandle(deviceHandle, 2)\n  imageBuffer = new UcharType(deviceWidth * deviceHeight)\n}\n\n/**\n * @description: 开始采集指纹\n * @return {*}\n */\nfunction startFingerCapture() {\n  if (!connected || !isOpen)\n    return false\n\n  // 获取指纹仪捕获到的图像\n  const result = captureFingerImage(deviceHandle, imageBuffer, deviceWidth * deviceHeight)\n  if (result <= 0)\n    return false\n\n  const templateData = new UcharType(2048)\n  // 提取图像\n  const templateDataLen = extractTemplate(algorithmHandler, imageBuffer, deviceWidth, deviceHeight, templateData, 2048)\n\n  if (templateDataLen <= 0)\n    return false\n\n  return templateData\n}\n\nasync function handleRegister(userId, order) {\n  let result = null\n  const templateData = startFingerCapture()\n\n  if (templateData)\n    result = await onRegister(templateData, userId, order)\n\n  return result\n}\n\n/**\n * @description: 注册指纹\n * @return {*}\n */\nasync function onRegister(templateData, userId, order) {\n  const resetRegisterData = () => {\n    registerCurrentIndex = 0\n    registerTemplates = []\n  }\n\n  const { success: isRegistered } = onIdentify(templateData)\n  if (isRegistered) {\n    resetRegisterData()\n    return genResponseData(false, '登记失败，当前手指已登记', { alert: true })\n  }\n\n  if (registerCurrentIndex >= MAX_REGISTRATION_COUNT) {\n    resetRegisterData()\n    return genResponseData(false)\n  }\n\n  if (registerCurrentIndex > 0) {\n    // 对比前后两次采集的指纹\n    const success = verifyTemplate(algorithmHandler, registerTemplates[registerCurrentIndex - 1], templateData)\n    if (!success) {\n      resetRegisterData()\n      return genResponseData(false, '登记失败，请按压同一个手指', { alert: true })\n    }\n  }\n\n  registerTemplates[registerCurrentIndex] = templateData\n  registerCurrentIndex++\n\n  if (registerCurrentIndex !== MAX_REGISTRATION_COUNT)\n    return genResponseData(true, `您还需要按压${MAX_REGISTRATION_COUNT - registerCurrentIndex}次手指`)\n\n  const regTemplates = new TemplateType(registerTemplates)\n  const registerTemplateData = new UcharType(TEMPLATE_BYTE_LENGTH)\n  const { success: genTempSuccess, result: genTempResult } = generateTemplate(\n    algorithmHandler,\n    regTemplates,\n    MAX_REGISTRATION_COUNT,\n    registerTemplateData,\n  )\n\n  if (!genTempSuccess) {\n    resetRegisterData()\n    return genResponseData(false, `生成登记模板失败，错误代码 = ${genTempResult}`, { alert: true })\n  }\n  const { success: addDbSuccess, result } = addTemplateToDb(algorithmHandler, 9999, genTempResult, registerTemplateData)\n\n  if (!addDbSuccess) {\n    resetRegisterData()\n    return genResponseData(true, `添加指纹失败，错误代码 = ${result}`, { alert: true })\n  }\n\n  const fingerData = await queryFingerByUserIdAndOrder(userId, order)\n  const data = registerTemplateData.buffer.toString('base64')\n  const orderText = order === 1 ? '一' : '二'\n  if (fingerData !== null) {\n    try {\n      await updateFingerByUserIdAndOrder(userId, order, data)\n      resetRegisterData()\n      return genResponseData(true, `指纹${orderText}更新成功`, { registerSuccess: true, alert: true })\n    }\n    catch (e) {\n      resetRegisterData()\n      return genResponseData(false, `指纹${orderText}更新失败`, { alert: true })\n    }\n  }\n  else {\n    try {\n      await addFinger(userId, order, data)\n      resetRegisterData()\n      return genResponseData(true, `指纹${orderText}添加成功`, { registerSuccess: true, alert: true })\n    }\n    catch (e) {\n      resetRegisterData()\n      return genResponseData(false, `指纹${orderText}添加失败`, { alert: true })\n    }\n  }\n}\n\n/**\n     * @description: 识别指纹\n     * @return {*}\n     */\nfunction onIdentify(templateData) {\n  const score = new IntType(1)\n  const fingerId = new IntType(1)\n  const result = identifyTemplate(algorithmHandler, templateData, fingerId, score)\n  const success = result === 1\n  const msg = success ? '识别成功!' : '识别失败'\n  const fingerIndex = fingerId[0] - 1\n  const userId = userFingerData[fingerIndex]?.user_id\n  return genResponseData(success, msg, userId)\n}\n\nfunction handleIdentify() {\n  let result = null\n  const templateData = startFingerCapture()\n\n  if (templateData)\n    result = onIdentify(templateData)\n\n  return result\n}\n\n/**\n    * @description: 加载数据库指纹模板到内存\n    * @return {*}\n    */\nasync function loadAllTemplate() {\n  userFingerData = await prisma.rfid_finger_user.findMany({\n    select: {\n      data: true,\n      user_id: true,\n    },\n  })\n  if (userFingerData.length === 0)\n    return\n\n  userFingerData.forEach((item, index) => {\n    if (item.data) {\n      const buf = Buffer.from(item.data, 'base64')\n      addTemplateToDb(algorithmHandler, index + 1, TEMPLATE_BYTE_LENGTH, buf)\n    }\n  })\n}\n\nconst fingerService = {\n  name: 'finger' as const,\n  fns: {\n    initSDK,\n    destroySDK,\n    queryConnectState,\n    openDevice,\n    closeDevice,\n    getParameter,\n    startFingerCapture,\n    handleRegister,\n    onRegister,\n    onIdentify,\n    handleIdentify,\n    loadAllTemplate,\n  },\n}\n\nexport default fingerService\n"],"names":["deviceList","DeviceArrayType","MAX_DEVICE_NUM","connected","isOpen","deviceHandle","imageBuffer","deviceWidth","deviceHeight","algorithmHandler","registerTemplates","registerCurrentIndex","userFingerData","initSDK","checkFileExist","initDeviceSDK","initAlgorithmSDK","destroySDK","destroyDeviceSDK","destroyAlgorithmSDK","queryConnectState","count","getDeviceCount","console","log","openDevice","openDeviceByHandle","ref","getParameter","initAlgorithm","success","deref","loadAllTemplate","closeDevice","deviceCloseResult","closeDeviceByHandle","algorithmCloseResult","closeAlgorithm","getParameterByHandle","UcharType","startFingerCapture","result","captureFingerImage","templateData","templateDataLen","extractTemplate","handleRegister","userId","order","onRegister","resetRegisterData","onIdentify","isRegistered","regTemplates","registerTemplateData","generateTemplate","genTempSuccess","genTempResult","addTemplateToDb","addDbSuccess","fingerData","data","orderText","e","genResponseData","alert","MAX_REGISTRATION_COUNT","verifyTemplate","TemplateType","TEMPLATE_BYTE_LENGTH","queryFingerByUserIdAndOrder","buffer","toString","updateFingerByUserIdAndOrder","registerSuccess","addFinger","score","IntType","fingerId","identifyTemplate","msg","fingerIndex","user_id","handleIdentify","prisma","rfid_finger_user","findMany","select","length","forEach","item","index","buf","Buffer","from","fingerService","name","fns"],"mappings":";;;;+BA+TA;;;eAAA;;;6DA/TmB;0BASZ;6BAYA;qBAC2D;sBACW;qBAC7C;sBACqD;+DAClE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnB,UAAU;AACV,IAAMA,aAAa,IAAIC,uBAAgBC;AACvC,YAAY;AACZ,IAAIC,YAAY;AAChB,YAAY;AACZ,IAAIC,SAAS;AACb,eAAe;AACf,IAAIC,eAAe;AACnB,SAAS;AACT,IAAIC,cAAc;AAClB,SAAS;AACT,IAAIC,cAAc;AAClB,IAAIC,eAAe;AACnB,OAAO;AACP,IAAIC,mBAAmB;AACvB,eAAe;AACf,IAAIC,oBAAoB,EAAE;AAC1B,iBAAiB;AACjB,IAAIC,uBAAuB;AAE3B,YAAY;AACZ,IAAIC,iBAAiB,EAAE;AAEvB,SAASC;IACPC,IAAAA;IACAC,IAAAA;IACAC,IAAAA;AACF;AAEA,SAASC;IACPC,IAAAA;IACAC,IAAAA;AACF;AAEA;;;CAGC,GACD,SAASC;IACP,IAAMC,QAAQC,IAAAA,4BAAetB,YAAYE;IACzCqB,QAAQC,IAAI,YAAYH;IACxBlB,YAAYkB,QAAQ;IACpB,OAAOlB;AACT;AAEA;;;CAGC,GACD,SAASsB;IACP,IAAI,CAACtB,WACH,OAAO;IACT,IAAIC,QACF,OAAO;IAET,OAAO;IACPC,eAAeqB,IAAAA,gCAAmB1B,UAAU,CAAC,EAAE,CAAC2B;IAEhD,SAAS;IACTC;IACA,QAAQ;IACRnB,mBAAmBoB,IAAAA,8BAActB,aAAaC;IAE9C,IAAMsB,UAAUzB,aAAa0B,YAAY,QAAQtB,iBAAiBsB,YAAY;IAC9E3B,SAAS0B;IAETE;IAEA,OAAOF;AACT;AAEA;;;CAGC,GACD,SAASG;IACP,IAAI,CAAC9B,aAAa,CAACC,QACjB,OAAO;IAET,OAAO;IACP,IAAM8B,oBAAoBC,IAAAA,iCAAoB9B;IAC9C,OAAO;IACP,IAAM+B,uBAAuBC,IAAAA,+BAAe5B;IAE5C,IAAMqB,UAAUI,sBAAsB,KAAKE,yBAAyB;IACpE,YAAY;IACZ,IAAIN,SAAS;QACX1B,SAAS;QACTC,eAAe;QACfC,cAAc;QACdC,cAAc;QACdC,eAAe;QACfC,mBAAmB;QACnBC,oBAAoB,EAAE;QACtBC,uBAAuB;IACzB;IAEA,OAAOmB;AACT;AAEA;;;CAGC,GACD,SAASF;IACPrB,cAAc+B,IAAAA,kCAAqBjC,cAAc;IACjDG,eAAe8B,IAAAA,kCAAqBjC,cAAc;IAClDC,cAAc,IAAIiC,iBAAUhC,cAAcC;AAC5C;AAEA;;;CAGC,GACD,SAASgC;IACP,IAAI,CAACrC,aAAa,CAACC,QACjB,OAAO;IAET,cAAc;IACd,IAAMqC,SAASC,IAAAA,gCAAmBrC,cAAcC,aAAaC,cAAcC;IAC3E,IAAIiC,UAAU,GACZ,OAAO;IAET,IAAME,eAAe,IAAIJ,iBAAU;IACnC,OAAO;IACP,IAAMK,kBAAkBC,IAAAA,gCAAgBpC,kBAAkBH,aAAaC,aAAaC,cAAcmC,cAAc;IAEhH,IAAIC,mBAAmB,GACrB,OAAO;IAET,OAAOD;AACT;SAEeG,eAAeC,MAAM,EAAEC,KAAK;WAA5BF;;SAAAA;IAAAA,kBAAf,oBAAA,SAA8BC,MAAM,EAAEC,KAAK;YACrCP,QACEE;;;;oBADFF,SAAS;oBACPE,eAAeH;yBAEjBG,cAAAA;;;;oBACO;;wBAAMM,WAAWN,cAAcI,QAAQC;;;oBAAhDP,SAAS;;;oBAEX;;wBAAOA;;;;IACT;WAReK;;SAcAG,WAAWN,YAAY,EAAEI,MAAM,EAAEC,KAAK;WAAtCC;;SAAAA;IAAAA,cAJf;;;CAGC,GACD,oBAAA,SAA0BN,YAAY,EAAEI,MAAM,EAAEC,KAAK;YAC7CE,mBAK4BC,aAAjBC,cAaTtB,SAaFuB,cACAC,sBACqDC,mBAA1CC,gBAAwBC,eAWCC,kBAAzBC,cAAclB,QAOzBmB,YACAC,MACAC,WAOGC,GAWAA;;;;oBAvEHb,oBAAoB;wBACxBvC,uBAAuB;wBACvBD,oBAAoB,EAAE;oBACxB;oBAEkCyC,cAAAA,WAAWR,eAA5BS,eAAiBD,YAA1BrB;oBACR,IAAIsB,cAAc;wBAChBF;wBACA;;4BAAOc,IAAAA,wBAAgB,OAAO,gBAAgB;gCAAEC,OAAO;4BAAK;;oBAC9D;oBAEA,IAAItD,wBAAwBuD,gCAAwB;wBAClDhB;wBACA;;4BAAOc,IAAAA,wBAAgB;;oBACzB;oBAEA,IAAIrD,uBAAuB,GAAG;wBAEtBmB,UAAUqC,IAAAA,+BAAe1D,kBAAkBC,iBAAiB,CAACC,uBAAuB,EAAE,EAAEgC;wBAC9F,IAAI,CAACb,SAAS;4BACZoB;4BACA;;gCAAOc,IAAAA,wBAAgB,OAAO,iBAAiB;oCAAEC,OAAO;gCAAK;;wBAC/D;oBACF;oBAEAvD,iBAAiB,CAACC,qBAAqB,GAAGgC;oBAC1ChC;oBAEA,IAAIA,yBAAyBuD,gCAC3B;;wBAAOF,IAAAA,wBAAgB,MAAM,AAAC,SAAsD,OAA9CE,iCAAyBvD,sBAAqB;;oBAEhF0C,eAAe,IAAIe,oBAAa1D;oBAChC4C,uBAAuB,IAAIf,iBAAU8B;oBACgBd,oBAAAA,IAAAA,iCACzD9C,kBACA4C,cACAa,gCACAZ,uBAJeE,iBAA0CD,kBAAnDzB,SAAiC2B,gBAAkBF,kBAA1Bd;oBAOjC,IAAI,CAACe,gBAAgB;wBACnBN;wBACA;;4BAAOc,IAAAA,wBAAgB,OAAO,AAAC,mBAAgC,OAAdP,gBAAiB;gCAAEQ,OAAO;4BAAK;;oBAClF;oBAC0CP,mBAAAA,IAAAA,gCAAgBjD,kBAAkB,MAAMgD,eAAeH,uBAAhFK,eAAyBD,iBAAlC5B,SAAuBW,SAAWiB,iBAAXjB;oBAE/B,IAAI,CAACkB,cAAc;wBACjBT;wBACA;;4BAAOc,IAAAA,wBAAgB,MAAM,AAAC,iBAAuB,OAAPvB,SAAU;gCAAEwB,OAAO;4BAAK;;oBACxE;oBAEmB;;wBAAMK,IAAAA,qCAA4BvB,QAAQC;;;oBAAvDY,aAAa;oBACbC,OAAOP,qBAAqBiB,OAAOC,SAAS;oBAC5CV,YAAYd,UAAU,IAAI,MAAM;yBAClCY,CAAAA,eAAe,IAAG,GAAlBA;;;;;;;;;;;;oBAEA;;wBAAMa,IAAAA,sCAA6B1B,QAAQC,OAAOa;;;oBAAlD;oBACAX;oBACA;;wBAAOc,IAAAA,wBAAgB,MAAM,AAAC,KAAc,OAAVF,WAAU,SAAO;4BAAEY,iBAAiB;4BAAMT,OAAO;wBAAK;;;oBAEnFF;oBACLb;oBACA;;wBAAOc,IAAAA,wBAAgB,OAAO,AAAC,KAAc,OAAVF,WAAU,SAAO;4BAAEG,OAAO;wBAAK;;;;;;;;;;;;;;oBAKlE;;wBAAMU,IAAAA,mBAAU5B,QAAQC,OAAOa;;;oBAA/B;oBACAX;oBACA;;wBAAOc,IAAAA,wBAAgB,MAAM,AAAC,KAAc,OAAVF,WAAU,SAAO;4BAAEY,iBAAiB;4BAAMT,OAAO;wBAAK;;;oBAEnFF;oBACLb;oBACA;;wBAAOc,IAAAA,wBAAgB,OAAO,AAAC,KAAc,OAAVF,WAAU,SAAO;4BAAEG,OAAO;wBAAK;;;;;;;;IAGxE;WA7EehB;;AA+Ef;;;KAGK,GACL,SAASE,WAAWR,YAAY;QAOf/B;IANf,IAAMgE,QAAQ,IAAIC,eAAQ;IAC1B,IAAMC,WAAW,IAAID,eAAQ;IAC7B,IAAMpC,SAASsC,IAAAA,iCAAiBtE,kBAAkBkC,cAAcmC,UAAUF;IAC1E,IAAM9C,UAAUW,WAAW;IAC3B,IAAMuC,MAAMlD,UAAU,UAAU;IAChC,IAAMmD,cAAcH,QAAQ,CAAC,EAAE,GAAG;IAClC,IAAM/B,SAASnC,CAAAA,8BAAAA,cAAc,CAACqE,YAAY,cAA3BrE,yCAAAA,KAAAA,IAAAA,4BAA6BsE;IAC5C,OAAOlB,IAAAA,wBAAgBlC,SAASkD,KAAKjC;AACvC;AAEA,SAASoC;IACP,IAAI1C,SAAS;IACb,IAAME,eAAeH;IAErB,IAAIG,cACFF,SAASU,WAAWR;IAEtB,OAAOF;AACT;SAMeT;WAAAA;;SAAAA;IAAAA,mBAJf;;;IAGI,GACJ,oBAAA;;;;oBACmB;;wBAAMoD,kBAAOC,iBAAiBC,SAAS;4BACtDC,QAAQ;gCACN1B,MAAM;gCACNqB,SAAS;4BACX;wBACF;;;oBALAtE,iBAAiB;oBAMjB,IAAIA,eAAe4E,WAAW,GAC5B;;;oBAEF5E,eAAe6E,QAAQ,SAACC,MAAMC;wBAC5B,IAAID,KAAK7B,MAAM;4BACb,IAAM+B,MAAMC,gBAAOC,KAAKJ,KAAK7B,MAAM;4BACnCH,IAAAA,gCAAgBjD,kBAAkBkF,QAAQ,GAAGtB,8BAAsBuB;wBACrE;oBACF;;;;;;IACF;WAhBe5D;;AAkBf,IAAM+D,gBAAgB;IACpBC,MAAM;IACNC,KAAK;QACHpF,SAAAA;QACAI,YAAAA;QACAG,mBAAAA;QACAK,YAAAA;QACAQ,aAAAA;QACAL,cAAAA;QACAY,oBAAAA;QACAM,gBAAAA;QACAG,YAAAA;QACAE,YAAAA;QACAgC,gBAAAA;QACAnD,iBAAAA;IACF;AACF;IAEA,WAAe+D"}