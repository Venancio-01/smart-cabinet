{"version":3,"sources":["../../../src/main/services/sys-service.ts"],"sourcesContent":["import { queryUserByUserId, updatePasswordByUserId } from '@/database/methods/user'\nimport prisma from '@/database'\nimport { genMd5EncryptedPassword } from '@/utils'\nimport { sys_dept, sys_user } from '@prisma/client'\nimport { join } from 'path'\n\nconst getUserData = async (userId: number) => {\n  const user = await queryUserByUserId(userId)\n  return user\n}\n\n/**\n * @description: 获取所有用户\n * @return {*}\n */\nconst getAllUsers = async (): Promise<sys_user[]> => {\n  return await prisma.sys_user.findMany({\n    include: {\n      sys_user_role: {\n        include: {\n          sys_role: true\n        }\n      }\n    }\n  })\n}\n\n/**\n * @description: 获取用户列表\n * @param {UserQueryProps} { userName, departmentId, roleId }\n * @return {*}\n */\nconst getUsersByCondition = async ({ userName, departmentId, roleId }: UserQueryProps): Promise<UserWithRoleProps[]> => {\n  const where = {\n    user_name: {\n      contains: userName\n    },\n    dept_id: departmentId ? Number(departmentId) : undefined\n  }\n\n  const users = await prisma.sys_user.findMany({\n    where,\n    include: {\n      sys_user_role: {\n        include: {\n          sys_role: true\n        }\n      }\n    }\n  })\n\n  return users.reduce((acc, cur) => {\n    const roles = cur.sys_user_role.map(userRole => userRole.sys_role)\n    if (roleId !== undefined) {\n      const role = roles.find(role => role?.id === roleId)\n      if (role !== undefined) {\n        acc.push({\n          ...cur,\n          role\n        })\n      }\n    } else {\n      acc.push({\n        ...cur,\n        role: roles[0]\n      })\n    }\n    return acc\n  }, [] as UserWithRoleProps[])\n}\n\n/**\n * @description: 获取部门列表\n * @return {*}\n */\nconst getDepartmentData = async (): Promise<sys_dept[]> => {\n  const departments = await prisma.sys_dept.findMany()\n  return departments\n}\n\n/**\n * @description: 获取部门列表\n * @param {DepartmentQueryProps} { departmentName }\n * @return {*}\n */\nconst getDepartmentsByCondition = async ({ departmentName }: DepartmentQueryProps): Promise<sys_dept[]> => {\n  return await prisma.sys_dept.findMany({\n    where: {\n      dept_name: {\n        contains: departmentName\n      }\n    }\n  })\n}\n\nconst updatePassword = async (userId: number, password: string) => {\n  const user = await queryUserByUserId(userId)\n  const encryptedPassword = genMd5EncryptedPassword(user.login_name, password, user.salt)\n  const result = await updatePasswordByUserId(userId, encryptedPassword)\n  const success = result !== null\n  return success\n}\n\n/**\n * @description: 校验密码\n * @param {sys_user} user\n * @param {string} password\n * @return {*}\n */\nconst verifyPassword = async (userString: string, password: string) => {\n  const user = JSON.parse(userString) as sys_user\n  \n  const encryptedPassword = genMd5EncryptedPassword(user.login_name, password, user.salt)\n  const success = user.password === encryptedPassword\n  return success\n}\n\n/**\n * @description: 校验卡号\n * @param {sys_user} user\n * @param {string} cardNumber\n * @return {*}\n */\nconst verifyCard = async (userString: string, cardNumber: string) => {\n  const user = JSON.parse(userString) as sys_user\n\n  const result = await prisma.rfid_card_user.findFirst({\n    where: {\n      user_id: user.id,\n    },\n    select: {\n      card_data: true\n    }\n  })\n\n  const success = result.card_data === cardNumber\n  return success\n}\n\nconst getProductionBgImagePath = async () => {\n  const path = join(process.resourcesPath, '/public/background/index.png')\n  return path\n}\n\n/**\n * @description: 获取角色列表\n * @return {*}\n */\nconst getRoleData = async () => {\n  const roles = await prisma.sys_role.findMany()\n  return roles\n}\n\n/**\n * @description: 获取权限列表\n * @return {*}\n */\nconst getPermissionData = async () => {\n  const permissions = await prisma.sys_permission.findMany()\n  return permissions\n}\n\n/**\n * @description: 获取角色权限列表\n * @return {*}\n */\nconst getRolePermissionData = async () => {\n  const rolePermissions = await prisma.sys_role_permission.findMany()\n  return rolePermissions\n}\n\nconst sysService = {\n  name: 'sys' as const,\n  fns: {\n    getUserData,\n    getAllUsers,\n    getUsersByCondition,\n    getDepartmentData,\n    getDepartmentsByCondition,\n    updatePassword,\n    verifyPassword,\n    verifyCard,\n    getProductionBgImagePath,\n    getRoleData,\n    getPermissionData,\n    getRolePermissionData\n  }\n}\n\nexport default sysService\n\n"],"names":["getUserData","userId","user","queryUserByUserId","getAllUsers","prisma","sys_user","findMany","include","sys_user_role","sys_role","getUsersByCondition","userName","departmentId","roleId","where","user_name","contains","dept_id","Number","undefined","users","reduce","acc","cur","roles","map","userRole","role","find","id","push","getDepartmentData","departments","sys_dept","getDepartmentsByCondition","departmentName","dept_name","updatePassword","password","encryptedPassword","genMd5EncryptedPassword","login_name","salt","result","updatePasswordByUserId","success","verifyPassword","userString","JSON","parse","verifyCard","cardNumber","rfid_card_user","findFirst","user_id","select","card_data","getProductionBgImagePath","path","join","process","resourcesPath","getRoleData","getPermissionData","permissions","sys_permission","getRolePermissionData","rolePermissions","sys_role_permission","sysService","name","fns"],"mappings":"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"}