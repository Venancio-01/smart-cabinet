{"version":3,"sources":["../../../src/main/services/sys-service.ts"],"sourcesContent":["import { join } from 'path'\nimport type { sys_dept, sys_user } from '@prisma/client'\nimport { queryUserByUserId, updatePasswordByUserId } from '@/database/methods/user'\nimport prisma from '@/database'\nimport { genMd5EncryptedPassword } from '@/utils'\n\nasync function getUserData(userId: number) {\n  const user = await queryUserByUserId(userId)\n  return user\n}\n\n/**\n * @description: 获取所有用户\n * @return {*}\n */\nasync function getAllUsers(): Promise<sys_user[]> {\n  return await prisma.sys_user.findMany({\n    include: {\n      sys_user_role: {\n        include: {\n          sys_role: true,\n        },\n      },\n    },\n  })\n}\n\n/**\n * @description: 获取用户列表\n * @param {UserQueryProps} { userName, departmentId, roleId }\n * @return {*}\n */\nasync function getUsersByCondition({ userName, departmentId, roleId }: UserQueryProps): Promise<UserWithRoleProps[]> {\n  const where = {\n    user_name: {\n      contains: userName,\n    },\n    dept_id: departmentId ? Number(departmentId) : undefined,\n  }\n\n  const users = await prisma.sys_user.findMany({\n    where,\n    include: {\n      sys_user_role: {\n        include: {\n          sys_role: true,\n        },\n      },\n    },\n  })\n\n  return users.reduce((acc, cur) => {\n    const roles = cur.sys_user_role.map(userRole => userRole.sys_role)\n    if (roleId !== undefined) {\n      const role = roles.find(role => role?.id === roleId)\n      if (role !== undefined) {\n        acc.push({\n          ...cur,\n          role,\n        })\n      }\n    }\n    else {\n      acc.push({\n        ...cur,\n        role: roles[0],\n      })\n    }\n    return acc\n  }, [] as UserWithRoleProps[])\n}\n\n/**\n * @description: 获取部门列表\n * @return {*}\n */\nasync function getDepartmentData(): Promise<sys_dept[]> {\n  const departments = await prisma.sys_dept.findMany()\n  return departments\n}\n\n/**\n * @description: 获取部门列表\n * @param {DepartmentQueryProps} { departmentName }\n * @return {*}\n */\nasync function getDepartmentsByCondition({ departmentName }: DepartmentQueryProps): Promise<sys_dept[]> {\n  return await prisma.sys_dept.findMany({\n    where: {\n      dept_name: {\n        contains: departmentName,\n      },\n    },\n  })\n}\n\nasync function updatePassword(userId: number, password: string) {\n  const user = await queryUserByUserId(userId)\n  const encryptedPassword = genMd5EncryptedPassword(user.login_name, password, user.salt)\n  const result = await updatePasswordByUserId(userId, encryptedPassword)\n  const success = result !== null\n  return success\n}\n\n/**\n * @description: 校验密码\n * @param {sys_user} user\n * @param {string} password\n * @return {*}\n */\nasync function verifyPassword(userString: string, password: string) {\n  const user = JSON.parse(userString) as sys_user\n\n  const encryptedPassword = genMd5EncryptedPassword(user.login_name, password, user.salt)\n  const success = user.password === encryptedPassword\n  return success\n}\n\n/**\n * @description: 校验卡号\n * @param {sys_user} user\n * @param {string} cardNumber\n * @return {*}\n */\nasync function verifyCard(userString: string, cardNumber: string) {\n  const user = JSON.parse(userString) as sys_user\n\n  const result = await prisma.rfid_card_user.findFirst({\n    where: {\n      user_id: user.id,\n    },\n    select: {\n      card_data: true,\n    },\n  })\n\n  const success = result.card_data === cardNumber\n  return success\n}\n\nasync function getProductionBgImagePath() {\n  const path = join(process.resourcesPath, '/public/background/index.png')\n  return path\n}\n\n/**\n * @description: 获取角色列表\n * @return {*}\n */\nasync function getRoleData() {\n  const roles = await prisma.sys_role.findMany()\n  return roles\n}\n\n/**\n * @description: 获取权限列表\n * @return {*}\n */\nasync function getPermissionData() {\n  const permissions = await prisma.sys_permission.findMany()\n  return permissions\n}\n\n/**\n * @description: 获取角色权限列表\n * @return {*}\n */\nasync function getRolePermissionData() {\n  const rolePermissions = await prisma.sys_role_permission.findMany()\n  return rolePermissions\n}\n\nconst sysService = {\n  name: 'sys' as const,\n  fns: {\n    getUserData,\n    getAllUsers,\n    getUsersByCondition,\n    getDepartmentData,\n    getDepartmentsByCondition,\n    updatePassword,\n    verifyPassword,\n    verifyCard,\n    getProductionBgImagePath,\n    getRoleData,\n    getPermissionData,\n    getRolePermissionData,\n  },\n}\n\nexport default sysService\n"],"names":["getUserData","userId","user","queryUserByUserId","getAllUsers","prisma","sys_user","findMany","include","sys_user_role","sys_role","getUsersByCondition","userName","departmentId","roleId","where","users","user_name","contains","dept_id","Number","undefined","reduce","acc","cur","roles","map","userRole","role","find","id","push","getDepartmentData","departments","sys_dept","getDepartmentsByCondition","departmentName","dept_name","updatePassword","password","encryptedPassword","result","success","genMd5EncryptedPassword","login_name","salt","updatePasswordByUserId","verifyPassword","userString","JSON","parse","verifyCard","cardNumber","rfid_card_user","findFirst","user_id","select","card_data","getProductionBgImagePath","path","join","process","resourcesPath","getRoleData","getPermissionData","permissions","sys_permission","getRolePermissionData","rolePermissions","sys_role_permission","sysService","name","fns"],"mappings":"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"}