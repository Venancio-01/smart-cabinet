{"version":3,"sources":["../../../src/main/services/update-service.ts"],"sourcesContent":["import Socket from '@/utils/socket'\nimport { UPDATE_SERVICE_SOCKET_PATH } from '@/config'\nimport { getAppVersion } from '@/utils'\n\nlet instance = null\nlet isConnected = false\n\nexport const handleExitUpdateService = () => {\n  if (!isConnected) return\n\n  const message = {\n    type: 'exit' as const\n  }\n\n  handleSendData(message)\n}\n\nconst handleSendData = (data: MessageType) => {\n  const stringifyData = JSON.stringify(data)\n  instance.write(stringifyData)\n}\n\nconst handleReceiveData = () => {\n  if (!isConnected) return\n\n  const data = instance.getData()\n  if (data === '') return null\n\n  instance.setData('')\n  try {\n    const parseData = JSON.parse(data) as ReceiveData\n    return parseData\n  } catch (e) {\n    console.log(e)\n    return null\n  }\n}\n\nconst handleSendCheckVersionMessage = () => {\n  if (!isConnected) return\n\n  const data = {\n    type: 'version' as const,\n    content: getAppVersion(),\n    path: 'https://service.qingshan.ltd/version.json'\n  }\n  handleSendData(data)\n}\n\nconst handleSendDownloadMessage = () => {\n  if (!isConnected) return\n\n  const data = {\n    type: 'download' as const\n  }\n  handleSendData(data)\n}\n\nconst updateService = {\n  name: 'update' as const,\n  fns: {\n    init: async () => {\n      instance = new Socket({\n        address: UPDATE_SERVICE_SOCKET_PATH,\n        format: 'utf-8'\n      })\n\n      try {\n        await instance.init()\n        return (isConnected = true)\n      } catch (e) {\n        console.log(e, 'update service socket 连接失败')\n        return isConnected\n      }\n    },\n    handleReceiveData,\n    handleSendCheckVersionMessage,\n    handleSendDownloadMessage,\n    handleExitUpdateService\n  }\n}\n\nexport default updateService\n\n"],"names":["handleExitUpdateService","instance","isConnected","message","type","handleSendData","data","stringifyData","JSON","stringify","write","handleReceiveData","getData","setData","parseData","parse","e","console","log","handleSendCheckVersionMessage","content","getAppVersion","path","handleSendDownloadMessage","updateService","name","fns","init","Socket","address","UPDATE_SERVICE_SOCKET_PATH","format"],"mappings":";;;;;;;;;;;IAOaA,uBAAuB;eAAvBA;;IA2Eb,OAA4B;eAA5B;;;+DAlFmB;wBACwB;uBACb;;;;;;AAE9B,IAAIC,WAAW;AACf,IAAIC,cAAc;AAEX,MAAMF,0BAA0B;IACrC,IAAI,CAACE,aAAa;IAElB,MAAMC,UAAU;QACdC,MAAM;IACR;IAEAC,eAAeF;AACjB;AAEA,MAAME,iBAAiB,CAACC;IACtB,MAAMC,gBAAgBC,KAAKC,UAAUH;IACrCL,SAASS,MAAMH;AACjB;AAEA,MAAMI,oBAAoB;IACxB,IAAI,CAACT,aAAa;IAElB,MAAMI,OAAOL,SAASW;IACtB,IAAIN,SAAS,IAAI,OAAO;IAExBL,SAASY,QAAQ;IACjB,IAAI;QACF,MAAMC,YAAYN,KAAKO,MAAMT;QAC7B,OAAOQ;IACT,EAAE,OAAOE,GAAG;QACVC,QAAQC,IAAIF;QACZ,OAAO;IACT;AACF;AAEA,MAAMG,gCAAgC;IACpC,IAAI,CAACjB,aAAa;IAElB,MAAMI,OAAO;QACXF,MAAM;QACNgB,SAASC,IAAAA;QACTC,MAAM;IACR;IACAjB,eAAeC;AACjB;AAEA,MAAMiB,4BAA4B;IAChC,IAAI,CAACrB,aAAa;IAElB,MAAMI,OAAO;QACXF,MAAM;IACR;IACAC,eAAeC;AACjB;AAEA,MAAMkB,gBAAgB;IACpBC,MAAM;IACNC,KAAK;QACHC,MAAM;YACJ1B,WAAW,IAAI2B,gBAAO;gBACpBC,SAASC;gBACTC,QAAQ;YACV;YAEA,IAAI;gBACF,MAAM9B,SAAS0B;gBACf,OAAQzB,cAAc;YACxB,EAAE,OAAOc,GAAG;gBACVC,QAAQC,IAAIF,GAAG;gBACf,OAAOd;YACT;QACF;QACAS;QACAQ;QACAI;QACAvB;IACF;AACF;MAEA,WAAewB"}