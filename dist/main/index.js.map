{"version":3,"sources":["../../src/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, globalShortcut, ipcMain, session } from 'electron'\nimport { services, makeChannelName } from '@/services'\nimport { createWindow } from '@/base/window'\nimport { handleExitUpdateService } from './services/update-service'\nimport { EVN_FILE_PATH } from '@/config'\nimport dotenv from 'dotenv'\nimport { resolve } from 'path'\n\n\n// 加载环境变量\ndotenv.config({\n  path: EVN_FILE_PATH\n})\n\n// Disable GPU Acceleration for Linux.\napp.disableHardwareAcceleration()\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null\n\n/**\n * @description: 禁用快捷键\n * @return {*}\n */\nconst disableShortcuts = () => {\n  // 禁用 Control+Shift+I 打开开发者面板\n  // 禁用 Control+R 刷新页面\n  // 禁用 F11 全屏\n  // ['CommandOrControl+Shift+I', 'CommandOrControl+R', 'F11']\n  globalShortcut.registerAll(['CommandOrControl+R', 'F11'], () => {\n    return false\n  })\n}\n\n/**\n * @description: 注册服务\n * @return {*}\n */\nconst installService = () => {\n  services.forEach(service => {\n    Object.entries(service.fns).forEach(([apiName, apiFn]) => {\n      ipcMain.handle(makeChannelName(service.name, apiName), (ev, ...args) => apiFn(...args))\n    })\n  })\n}\n\n\napp.whenReady().then(async () => {\n  win = await createWindow()\n  installService()\n  if (app.isPackaged) {\n    disableShortcuts()\n  }\n})\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\napp.on('before-quit', () => {\n  handleExitUpdateService\n})\n"],"names":["dotenv","config","path","EVN_FILE_PATH","app","disableHardwareAcceleration","requestSingleInstanceLock","quit","process","exit","win","disableShortcuts","globalShortcut","registerAll","installService","services","forEach","service","Object","entries","fns","apiName","apiFn","ipcMain","handle","makeChannelName","name","ev","args","whenReady","then","createWindow","isPackaged","on","platform","isMinimized","restore","focus","allWindows","BrowserWindow","getAllWindows","length","handleExitUpdateService"],"mappings":";;;;0BAAqE;0BAC3B;wBACb;+BACW;wBACV;+DACX;;;;;;AAInB,SAAS;AACTA,gBAAOC,OAAO;IACZC,MAAMC;AACR;AAEA,sCAAsC;AACtCC,cAAIC;AAEJ,IAAI,CAACD,cAAIE,6BAA6B;IACpCF,cAAIG;IACJC,QAAQC,KAAK;AACf;AAEA,oCAAoC;AACpC,8CAA8C;AAC9C,wEAAwE;AACxE,6DAA6D;AAE7D,IAAIC,MAA4B;AAEhC;;;CAGC,GACD,MAAMC,mBAAmB;IACvB,6BAA6B;IAC7B,oBAAoB;IACpB,YAAY;IACZ,4DAA4D;IAC5DC,yBAAeC,YAAY;QAAC;QAAsB;KAAM,EAAE;QACxD,OAAO;IACT;AACF;AAEA;;;CAGC,GACD,MAAMC,iBAAiB;IACrBC,mBAASC,QAAQC,CAAAA;QACfC,OAAOC,QAAQF,QAAQG,KAAKJ,QAAQ,CAAC,CAACK,SAASC,MAAM;YACnDC,kBAAQC,OAAOC,IAAAA,2BAAgBR,QAAQS,MAAML,UAAU,CAACM,IAAI,GAAGC,OAASN,SAASM;QACnF;IACF;AACF;AAGAxB,cAAIyB,YAAYC,KAAK;IACnBpB,MAAM,MAAMqB,IAAAA;IACZjB;IACA,IAAIV,cAAI4B,YAAY;QAClBrB;IACF;AACF;AAEAP,cAAI6B,GAAG,qBAAqB;IAC1BvB,MAAM;IACN,IAAIF,QAAQ0B,aAAa,UAAU;QACjC9B,cAAIG;IACN;AACF;AAEAH,cAAI6B,GAAG,mBAAmB;IACxB,IAAIvB,KAAK;QACP,6DAA6D;QAC7D,IAAIA,IAAIyB,eAAezB,IAAI0B;QAC3B1B,IAAI2B;IACN;AACF;AAEAjC,cAAI6B,GAAG,YAAY;IACjB,MAAMK,aAAaC,wBAAcC;IAEjC,IAAIF,WAAWG,QAAQ;QACrBH,UAAU,CAAC,EAAE,CAACD;IAChB,OAAO;QACLN,IAAAA;IACF;AACF;AAEA3B,cAAI6B,GAAG,eAAe;IACpBS;AACF"}